{"version":3,"sources":["components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/posts.ts","api/users.ts","App.tsx","index.tsx"],"names":["PostsList","props","postsList","setSelectedPostId","setSelectedPost","selectedPost","className","length","map","post","userId","title","type","onClick","id","BASE_URL","getComments","postId","a","fetch","response","ok","Promise","reject","Error","json","createComment","comment","method","headers","body","JSON","stringify","removeComment","commentId","NewCommentForm","comments","useState","queryName","setQueryName","queryEmail","setQueryEmail","queryComment","setQueryComment","handleChange","event","target","name","value","onChange","placeholder","preventDefault","newComment","email","PostDetails","setComments","showComments","setShowComments","useEffect","getComment","whatNeedShow","getUserPosts","getUserPost","getUsers","App","selectedPostId","setPosts","usersList","setUsers","UserPost","posts","users","console","log","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7e6305d.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ninterface Props {\n  postsList: Post[];\n  setSelectedPostId: (id: number) => void;\n  setSelectedPost: (post: null) => void;\n  selectedPost: Post | null;\n}\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const {\n    postsList,\n    setSelectedPostId,\n    setSelectedPost,\n    selectedPost,\n  } = props;\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {postsList.length > 0 && postsList.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => (\n                !selectedPost ? setSelectedPostId(post.id) : setSelectedPost(null)\n              )}\n            >\n              {selectedPost?.id === post.id ? <div>Close</div> : <div>Open</div>}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api/comments';\n\nexport const getComments = async (postId: number): Promise<Comment[]> => {\n  const response = await fetch(`${BASE_URL}?postId=${postId}`);\n\n  if (!response.ok) {\n    return Promise.reject(new Error('Error'));\n  }\n\n  return response.json();\n};\n\nexport const createComment = async (comment: Comment) => {\n  const response = await fetch(BASE_URL, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n\n  return response.json();\n};\n\nexport const removeComment = async (commentId: number) => {\n  const response = await fetch(`${BASE_URL}/${commentId}`, { method: 'DELETE' });\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { createComment } from '../../api/comments';\n\ninterface Props {\n  comments: Comment[];\n  postId: number;\n}\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { comments, postId } = props;\n  const [queryName, setQueryName] = useState('');\n  const [queryEmail, setQueryEmail] = useState('');\n  const [queryComment, setQueryComment] = useState('');\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement> |\n  React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setQueryName(value);\n        break;\n\n      case 'email':\n        setQueryEmail(value);\n        break;\n\n      case 'comment':\n        setQueryComment(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newComment = {\n      id: comments.length,\n      postId,\n      name: queryName,\n      email: queryEmail,\n      body: queryComment,\n    };\n\n    setQueryComment('');\n    setQueryEmail('');\n    setQueryName('');\n\n    createComment(newComment as Comment);\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={queryName}\n          onChange={handleChange}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          onChange={handleChange}\n          value={queryEmail}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"comment\"\n          value={queryComment}\n          onChange={handleChange}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        onClick={handleSubmit}\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getComments, removeComment } from '../../api/comments';\n\ninterface Props {\n  selectedPost: Post;\n}\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { selectedPost } = props;\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [showComments, setShowComments] = useState(true);\n\n  useEffect(() => {\n    const getComment = async () => {\n      const response = await getComments(selectedPost.id);\n\n      setComments(response);\n    };\n\n    getComment();\n  }, [comments]);\n\n  const whatNeedShow = showComments ? `Hide ${comments.length} comments` : 'Show comments';\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {selectedPost.body}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button type=\"button\" className=\"button\" onClick={() => setShowComments(!showComments)}>\n          {comments.length > 0 ? whatNeedShow : 'Not comment yet'}\n        </button>\n\n        <ul className=\"PostDetails__list\">\n          {showComments && comments.map(comment => (\n            <li className=\"PostDetails__list-item\" key={comment.id}>\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                onClick={() => removeComment(comment.id)}\n              >\n                X\n              </button>\n              <p>\n                {comment.body}\n              </p>\n            </li>\n          ))}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm comments={comments} postId={selectedPost.id} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api/posts';\n\nexport const getUserPosts = async (userId: string): Promise<Post[]> => {\n  const response = await fetch(`${BASE_URL}${userId}`);\n\n  if (!response.ok) {\n    return Promise.reject(new Error('Error'));\n  }\n\n  return response.json();\n};\n\nexport const getUserPost = async (userId: string): Promise<Post> => {\n  const response = await fetch(`${BASE_URL}${userId}`);\n\n  if (!response.ok) {\n    return Promise.reject(new Error('Error'));\n  }\n\n  return response.json();\n};\n","const BASE_URL = 'https://mate.academy/students-api/users';\n\nexport const getUsers = async (): Promise<User[]> => {\n  const response = await fetch(BASE_URL);\n\n  if (!response.ok) {\n    return Promise.reject(new Error('Error'));\n  }\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts, getUserPost } from './api/posts';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [postsList, setPosts] = useState<Post[]>([]);\n  const [usersList, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    const UserPost = async () => {\n      const posts = await getUserPosts('');\n      const users = await getUsers();\n\n      setUsers(users);\n      setPosts(posts);\n    };\n\n    UserPost();\n  }, []);\n\n  useEffect(() => {\n    const UserPost = async () => {\n      const post = await getUserPost(`/${selectedPostId}`);\n\n      setSelectedPost(post);\n      setSelectedPostId(0);\n    };\n\n    UserPost();\n  }, [selectedPostId]);\n\n  // eslint-disable-next-line no-console\n  console.log(selectedPost);\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    const UserPost = async () => {\n      const posts = await getUserPosts(value !== '' ? `?userId=${value}` : '');\n\n      setPosts(posts);\n    };\n\n    UserPost();\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={handleChange}\n          >\n            <option value=\"\">All users</option>\n            {usersList.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            postsList={postsList}\n            setSelectedPostId={setSelectedPostId}\n            setSelectedPost={setSelectedPost}\n            selectedPost={selectedPost}\n          />\n        </div>\n\n        {selectedPost\n          && (\n            <div className=\"App__content\">\n              <PostDetails selectedPost={selectedPost} />\n            </div>\n          )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}